// <auto-generated />
using System;
using DataLayer.EfCode;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(EfCoreContext))]
    [Migration("20190410165655_CorrectedSchema6.0")]
    partial class CorrectedSchema60
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BizData.Entities.AccionC_Material", b =>
                {
                    b.Property<int>("AccionC_MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccionConstructivaID");

                    b.Property<decimal?>("Cantidad");

                    b.Property<int?>("MaterialID");

                    b.Property<decimal?>("PrecioCUC");

                    b.Property<decimal?>("PrecioCUP");

                    b.HasKey("AccionC_MaterialID");

                    b.HasIndex("AccionConstructivaID");

                    b.HasIndex("MaterialID");

                    b.ToTable("AccCons_Mat");
                });

            modelBuilder.Entity("BizData.Entities.AccionConstructiva", b =>
                {
                    b.Property<int>("AccionConstructivaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EspecialidadID");

                    b.Property<int?>("ManoObraID");

                    b.Property<string>("Nombre");

                    b.Property<int?>("ObjetoObraID");

                    b.Property<int?>("PlanID");

                    b.HasKey("AccionConstructivaID");

                    b.HasIndex("EspecialidadID");

                    b.HasIndex("ManoObraID");

                    b.HasIndex("ObjetoObraID");

                    b.HasIndex("PlanID");

                    b.ToTable("AccionesCons");
                });

            modelBuilder.Entity("BizData.Entities.Especialidad", b =>
                {
                    b.Property<int>("EspecialidadID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipo");

                    b.HasKey("EspecialidadID");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("BizData.Entities.Inmueble", b =>
                {
                    b.Property<int>("InmuebleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion");

                    b.Property<int?>("UOUnidadOrganizativaID");

                    b.Property<int?>("UnidadOrganizativaID");

                    b.HasKey("InmuebleID");

                    b.HasIndex("UOUnidadOrganizativaID");

                    b.HasIndex("UnidadOrganizativaID");

                    b.ToTable("Inmuebles");
                });

            modelBuilder.Entity("BizData.Entities.ManoObra", b =>
                {
                    b.Property<int>("ManoObraID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cantidad");

                    b.Property<decimal?>("PrecioCUC");

                    b.Property<decimal?>("PrecioCUP");

                    b.Property<int?>("UnidadMedidaID");

                    b.HasKey("ManoObraID");

                    b.HasIndex("UnidadMedidaID");

                    b.ToTable("ManosObra");
                });

            modelBuilder.Entity("BizData.Entities.Material", b =>
                {
                    b.Property<int>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.Property<int?>("UnidadMedidaID");

                    b.HasKey("MaterialID");

                    b.HasIndex("UnidadMedidaID");

                    b.ToTable("Materiales");
                });

            modelBuilder.Entity("BizData.Entities.ObjetoObra", b =>
                {
                    b.Property<int>("ObjetoObraID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InmuebleID");

                    b.Property<string>("Nombre");

                    b.HasKey("ObjetoObraID");

                    b.HasIndex("InmuebleID");

                    b.ToTable("ObjetosObra");
                });

            modelBuilder.Entity("BizData.Entities.Plan", b =>
                {
                    b.Property<int>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Año");

                    b.Property<int>("Estado");

                    b.Property<decimal>("Presupuesto");

                    b.Property<string>("TipoPlan");

                    b.HasKey("PlanID");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("BizData.Entities.PlanActual", b =>
                {
                    b.Property<int>("PlanActualID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlanID");

                    b.Property<int?>("UnidadOrganizativaID");

                    b.HasKey("PlanActualID");

                    b.HasIndex("PlanID");

                    b.HasIndex("UnidadOrganizativaID");

                    b.ToTable("PlanesActuales");
                });

            modelBuilder.Entity("BizData.Entities.Provincia", b =>
                {
                    b.Property<int>("ProvinciaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("ProvinciaID");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("BizData.Entities.UnidadMedida", b =>
                {
                    b.Property<int>("UnidadMedidaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("UnidadMedidaID");

                    b.ToTable("UnidadesMedida");
                });

            modelBuilder.Entity("BizData.Entities.UnidadOrganizativa", b =>
                {
                    b.Property<int>("UnidadOrganizativaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.Property<int?>("ProvinciaID");

                    b.HasKey("UnidadOrganizativaID");

                    b.HasIndex("ProvinciaID");

                    b.ToTable("UnidadesOrganizativas");
                });

            modelBuilder.Entity("BizData.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstLastName");

                    b.Property<string>("FirstName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondLastName");

                    b.Property<string>("SecondName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UnidadOrganizativaID");

                    b.Property<int?>("UnidadOrganizativaID1");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UnidadOrganizativaID");

                    b.HasIndex("UnidadOrganizativaID1");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BizData.Entities.AccionC_Material", b =>
                {
                    b.HasOne("BizData.Entities.AccionConstructiva", "AccionConstructiva")
                        .WithMany("Materiales")
                        .HasForeignKey("AccionConstructivaID");

                    b.HasOne("BizData.Entities.Material", "Material")
                        .WithMany("AccionesConstructivas")
                        .HasForeignKey("MaterialID");
                });

            modelBuilder.Entity("BizData.Entities.AccionConstructiva", b =>
                {
                    b.HasOne("BizData.Entities.Especialidad", "Especialidad")
                        .WithMany()
                        .HasForeignKey("EspecialidadID");

                    b.HasOne("BizData.Entities.ManoObra", "ManoObra")
                        .WithMany()
                        .HasForeignKey("ManoObraID");

                    b.HasOne("BizData.Entities.ObjetoObra", "ObjetoObra")
                        .WithMany("AccionesConstructivas")
                        .HasForeignKey("ObjetoObraID");

                    b.HasOne("BizData.Entities.Plan", "Plan")
                        .WithMany("AccionesConstructivas")
                        .HasForeignKey("PlanID");
                });

            modelBuilder.Entity("BizData.Entities.Inmueble", b =>
                {
                    b.HasOne("BizData.Entities.UnidadOrganizativa", "UO")
                        .WithMany("Inmuebles")
                        .HasForeignKey("UOUnidadOrganizativaID");

                    b.HasOne("BizData.Entities.UnidadOrganizativa")
                        .WithMany()
                        .HasForeignKey("UnidadOrganizativaID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("BizData.Entities.ManoObra", b =>
                {
                    b.HasOne("BizData.Entities.UnidadMedida", "UnidadMedida")
                        .WithMany()
                        .HasForeignKey("UnidadMedidaID");
                });

            modelBuilder.Entity("BizData.Entities.Material", b =>
                {
                    b.HasOne("BizData.Entities.UnidadMedida", "UnidadMedida")
                        .WithMany()
                        .HasForeignKey("UnidadMedidaID");
                });

            modelBuilder.Entity("BizData.Entities.ObjetoObra", b =>
                {
                    b.HasOne("BizData.Entities.Inmueble", "Inmueble")
                        .WithMany("ObjetosDeObra")
                        .HasForeignKey("InmuebleID");
                });

            modelBuilder.Entity("BizData.Entities.PlanActual", b =>
                {
                    b.HasOne("BizData.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanID");

                    b.HasOne("BizData.Entities.UnidadOrganizativa", "UnidadOrganizativa")
                        .WithMany()
                        .HasForeignKey("UnidadOrganizativaID");
                });

            modelBuilder.Entity("BizData.Entities.UnidadOrganizativa", b =>
                {
                    b.HasOne("BizData.Entities.Provincia", "Provincia")
                        .WithMany("UnidadesOrganizativas")
                        .HasForeignKey("ProvinciaID");
                });

            modelBuilder.Entity("BizData.Entities.Usuario", b =>
                {
                    b.HasOne("BizData.Entities.UnidadOrganizativa", "UnidadOrganizativa")
                        .WithMany("Inversionistas")
                        .HasForeignKey("UnidadOrganizativaID");

                    b.HasOne("BizData.Entities.UnidadOrganizativa")
                        .WithMany()
                        .HasForeignKey("UnidadOrganizativaID1")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BizData.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BizData.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BizData.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BizData.Entities.Usuario")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
