@using BizLogic.Planning
@using BizData.Entities
@model AccionConsCommand
@{
    List<ObjetoObra> obj = new List<ObjetoObra>();
    foreach (var item in Model.Inmuebles)
    {
        foreach (var item1 in item.ObjetosDeObra)
        {
            obj.Add(item1);
        }
    }
    int a = Model.PlanID;
    Layout = "_AddACLayout";
}


<body>
    <style>
        .form-control {
            width: 200px;
        }
    </style>

    <h1>Añadir Acción Constructiva</h1>
    <script>
        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                //if (!val) { return false;}
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {

                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /**/
            inp.addEventListener("mouseover", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                //if (!val) { return false;}
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {

                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

    </script>

    <form autocomplete="off" method="post">

        <div class="form-group">
            <label>Inmueble</label>
            <select class="form-control" id="selInm">
                @foreach (var item in Model.Inmuebles)
                {
                    <option value="@item.InmuebleID">@item.Direccion</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>Objeto de Obra</label>
            <select asp-for="ObjetoObraID" class="form-control" id="selobj"></select>
        </div>

        <p>

            <table>
                <tr>
                    <th> Nombre </th>
                    <th> Unidad de Medida </th>
                    <th> Especialidad </th>
                    <th> Precio en CUC </th>
                    <th> Precio en CUP </th>
                </tr>
                <tr>
                    <td> @Html.Partial("PartialNombre", Model) </td>
                    <td> 
                        <select class="form-control" asp-for="UM">
                            @foreach (var item in Model.UnidadesMedida)
                            {

                                <option value="@item"> @item</option>

                            }
                        </select>
                    </td>
                    <td>
                        <select class="form-control" asp-for="EspecialidadID">
                            @foreach (var item in Model.Especialidades)
                            {

                                <option value=@item.EspecialidadID> @item.Tipo</option>

                            }
                        </select>
                    </td>
                    <td> <input class="precio" asp-for="PrecioCUC" placeholder="CUC" /> </td>
                    <td> <input class="precio" asp-for="PrecioCUP" placeholder="CUP" /> </td>
                </tr>
            </table>
        </p>
        <br />
        <button type="button" class="button" id="add"> <span> Añadir Material</span></button>

        <table id="tabla2">
            <tr>
                <th>
                    Nombre del material
                </th>
                <th>
                    Unidad de Medida
                </th>
                <th>
                    Precio CUC
                </th>
                <th>
                    Precio CUP
                </th>

            </tr>
            <tr>
                <td><input type="text" name="ListItems[0].nameMaterial"></td>
                <td><input type="text" name="ListItems[0].unidadMedida"></td>
                <td><input type="text" class="precio" name="ListItems[0].precioCUC"></td>
                <td><input type="text" class="precio" name="ListItems[0].precioCUP"></td>
            </tr>
            @Html.EditorFor(F => F.ListItems)
        </table>
        <input asp-for="PlanID" hidden="hidden" />

        <button type="submit" class="button"> <span>Añadir</span></button>
    </form>


    <script>
        function inputdouble() {
            var precio = document.getElementsByClassName("precio");

            for (var i = 0; i < precio.length; i++) {
                var inp = precio[i];
                inp.addEventListener("input", function (e) {
                    while (this.value[0] == " ") {


                        this.value = this.value.substring(1, this.value.length);
                    }

                    while (isNaN(this.value) || this.value[this.value.length - 1] == " ") {


                        this.value = this.value.substring(0, this.value.length - 1);
                    }


                    var str = this.value.split(".");
                    if (str.length == 2) {
                        var comma = str[1].substring(0, 2);
                        this.value = str[0] + "." + comma;
                    }

                });
            }

        }
        inputdouble();
    </script>
    <script>

        document.getElementById("add").addEventListener("click", function (e) {

            //e.preventDefault();
            var i = document.getElementById("tabla2").getElementsByTagName("tr").length;
            i = i - 1;
            var tr = document.createElement("tr");
            var td = document.createElement("td");
            var inp = document.createElement("input");
            inp.type = "text";
            //inp.className = "precio";
            inp.name = "ListItems[" + i + "].nameMaterial";
            td.appendChild(inp);
            tr.appendChild(td);
            var td4 = document.createElement("td");
            var inp4 = document.createElement("input");
            inp4.type = "text";
            //inp4.className = "precio";
            inp4.name = "ListItems[" + i + "].unidadMedida";
            td4.appendChild(inp4);
            tr.appendChild(td4);
            var td2 = document.createElement("td");
            var inp2 = document.createElement("input");
            inp2.type = "text";
            inp2.className = "precio";
            inp2.name = "ListItems[" + i + "].precioCUC";
            td2.appendChild(inp2);
            tr.appendChild(td2);
            var td3 = document.createElement("td");
            var inp3 = document.createElement("input");
            inp3.type = "text";
            inp3.className = "precio";
            inp3.name = "ListItems[" + i + "].precioCUP";
            td3.appendChild(inp3);
            tr.appendChild(td3);
            document.getElementById("tabla2").appendChild(tr);
            inputdouble()
        });
    </script>
    <script>
        function hi()
        {

            var selimp = document.getElementById("selInm");

            var s = selimp.value;

                var sel = document.getElementById("selobj");
                var opt = sel.getElementsByTagName("option");
                var k = opt.length;
                for (var i = 0; i <k; i++) {
                    sel.removeChild(opt[0]);
                }

                var nombres =  @Html.Raw(Json.Serialize(obj.Select(x=>x.Nombre)));
                var inmuebles =  @Html.Raw(Json.Serialize(obj.Select(x=>x.Inmueble.InmuebleID)));
                var ids =  @Html.Raw(Json.Serialize(obj.Select(x=>x.ObjetoObraID)));
                console.log(nombres);
                console.log(inmuebles);
                console.log(ids);
                for (var i = 0; i < nombres.length; i++) {
                    var a = document.createElement("option");
                    a.innerHTML = nombres[i];
                    a.setAttribute("value", ids[i]);
                    a.name ="ObjetoObraID"
                    if (inmuebles[i]==s)
                        sel.appendChild(a);
                }
        }
        hi();
        function show() {
            var selimp = document.getElementById("selInm");
            selimp.addEventListener("change", function (e) {
                var s = this.value;

                var sel = document.getElementById("selobj");
                var opt = sel.getElementsByTagName("option");
                var k = opt.length;
                for (var i = 0; i <k; i++) {
                    sel.removeChild(opt[0]);
                }

                var nombres =  @Html.Raw(Json.Serialize(obj.Select(x=>x.Nombre)));
                var inmuebles =  @Html.Raw(Json.Serialize(obj.Select(x=>x.Inmueble.InmuebleID)));
                var ids =  @Html.Raw(Json.Serialize(obj.Select(x=>x.ObjetoObraID)));
                console.log(nombres);
                console.log(inmuebles);
                console.log(ids);
                for (var i = 0; i < nombres.length; i++) {
                    var a = document.createElement("option");
                    a.innerHTML = nombres[i];
                    a.setAttribute("value", ids[i]);
                    a.name ="ObjetoObraID"
                    if (inmuebles[i]==s)
                        sel.appendChild(a);
                }


            });

        }
        show();
    </script>
    <style>
        .autocomplete {
            /*the container must be positioned relative:*/
            position: relative;
            display: inline-block;
        }

        input {
            width: auto;
            border: 1px solid transparent;
            background-color: white;
            padding: 10px;
            font-size: 16px;
        }

        select {
            width: auto;
        }

        input[type=text] {
            background-color: #e5e4e4;
            width: auto;
        }

            input[type=text].precio {
                background-color: #e5e4e4;
                width: 60px;
            }

        input[type=submit] {
            background-color: #ee0000;
            color: #fff;
            cursor: pointer;
        }

        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
        }

            .autocomplete-items div {
                padding: 10px;
                cursor: pointer;
                background-color: #fff;
                border-bottom: 1px solid #d4d4d4;
            }

                .autocomplete-items div:hover {
                    /*when hovering an item:*/
                    background-color: #e5e4e4;
                }

        .autocomplete-active {
            /*when navigating through the items using the arrow keys:*/
            background-color: DodgerBlue !important;
            color: #ffffff;
        }

        .label {
            color: white;
            padding: 8px;
        }

        .mylabel {
            background-color: #ee0000;
        }
    </style>

</body>
